DEADLOCK RECOVERY:
1) Recovery through preemption: a resource is temporarily taken away from the process.
The process' progress with the resource is saved on preemption and then restored.
2) Recovery through rollback:
The checkpoints, or snapshots, of program execution and memory, are frequently taken and stored.
If the process holds the resource that is needed to resolve the deadlock, is it rolled back to the checkpoint when it wasn't holding that resource.
The disadvantage is making snapshots is costly.
3) Recovery through killing processes:
Kill some process in a random cycle. If the deadlock is not resolved, repeat.

Recovery is an acceptable method for dealing with deadlocks if the processes' and resources' progress can easily be reproduced or rerun.
For example, killing a running compiler and restarting it doesn't cause problems since no used resources (input file) were corrupted on the previous unsuccessful run.
However, all recovery approaches have the same disadvantage: some resources cannot be rerun. Imagine if the resource is a CD drive and the process is writing data to a write-once CD-R disk. If we revert it, progress made to writing the disk will be discarded and the disk will be corrupted.

AVOIDING DEADLOCK:
Dealing with deadlock with avoidance implies that the operating system tries not to perform allocations that may lead to deadlock. To be able to predict whether the allocation leads to a safe or unsafe state, we need to know how much resources will be required by the process in total, so programs must know how much resources they will need in advance.
This is rarely the case, and this is the reason deadlock avoidance algorithms are almost never used in practice, except for the systems that require programmers to explicitly specify what resources will be used (mostly in mainframes).

DEADLOCK PREVENTION:
Deadlock prevention is the most common approach used in real systems. It exploits breaking the necessary and sufficient conditions of deadlock:
1) Mutual exclusion of resources - e.g. instead of the process directly accessing the printer they output their requests in the spooling directory; these requests are queued and processed one by one by the printing daemon
2) Hold and wait - prohibit process taking resources before they release previously taken
3) No preemption - to allow preemption, resources can be virtualized, again the example of spooling
4) Circular wait - allow taking the resources only in a certain order, e.g. by numbering it from 1 to N and prohibiting acquiring a resource with a number lesser than the current resource in use.

However, sometimes it is not possible to eliminate these conditions for some resources. For example, databases require locking to avoid data races.

To sum up, deadlock prevention is the most general approach that is commonly used. But with some constraints, other ways can as well be applicable.
